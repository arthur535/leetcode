class Solution {
public:
    void merge_sort(vector<int>& vec,int begin,int end) {
    if (begin < end) {
        int mid = begin + (end - begin) / 2;
        merge_sort(vec, begin, mid);
        merge_sort(vec, mid+1, end);
        merger(vec, begin, mid, end);
    }
}
    void merger(vector<int>& vec,int begin, int mid, int end) {
    int i = begin;
    int j = mid + 1;
    vector<int> vec1;
    while (i <= mid && j <= end) {
        if (vec[i] <= vec[j]) {
            vec1.push_back(vec[i]);
            i++;
        }
        else {
            vec1.push_back(vec[j]);
            j++;
        }
    }
    
    while (i <= mid) {
        vec1.push_back(vec[i]);
        i++;
    }
    
    while (j <= end) {
        vec1.push_back(vec[j]);
        j++;
    }

    for (int i = 0; i < vec1.size(); i++) {
        vec[begin+i] = vec1[i];
    }
}
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        vector<int> vec;
        for(int i = 0; i < m; ++i){
            vec.push_back(nums1[i]);
        }
        for(int i = 0; i < n; ++i){
            vec.push_back(nums2[i]);
        }
        merge_sort(vec,0,vec.size()-1);
        nums1.clear();
        for(int i = 0; i < vec.size(); ++i){
            nums1.push_back(vec[i]);
        }
    }
};
